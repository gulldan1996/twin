{"version":3,"sources":["Components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","props","state","position","lastPosition","multiplier","Math","floor","random","start","setStartPosition","speed","iconHeight","forceUpdateHandler","bind","this","reset","timer","clearInterval","setState","timeRemaining","setInterval","tick","maxPosition","moved","currentPosition","i","onFinish","getSymbolFromPosition","moveBackground","style","backgroundPosition","className","React","Component","RepeatButton","aria-label","id","onClick","App","winner","finishHandler","handleClick","emptyArray","_child1","_child2","_child3","_child4","_child5","value","matches","push","length","first","results","every","match","repeatButton","ref","child","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.93dfef5d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Spinner extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.forceUpdateHandler = this.forceUpdateHandler.bind(this);\r\n  }\r\n\r\n  forceUpdateHandler() {\r\n    this.reset();\r\n  }\r\n\r\n  reset() {\r\n    if (this.timer) {\r\n      clearInterval(this.timer);\r\n    }\r\n\r\n    this.start = this.setStartPosition();\r\n\r\n    this.setState({\r\n      position: this.start,\r\n      timeRemaining: this.props.timer\r\n    });\r\n\r\n    this.timer = setInterval(() => {\r\n      this.tick();\r\n    }, 100);\r\n  }\r\n\r\n  state = {\r\n    position: 0,\r\n    lastPosition: null\r\n  };\r\n\r\n  static iconHeight = 155;\r\n  multiplier = Math.floor(Math.random() * (3 - 1) + 1);\r\n\r\n  start = this.setStartPosition();\r\n  speed = Spinner.iconHeight * this.multiplier;\r\n\r\n  setStartPosition() {\r\n    return Math.floor(Math.random() * 13) * Spinner.iconHeight * -1;\r\n  }\r\n\r\n  moveBackground() {\r\n    this.setState({\r\n      position: this.state.position - this.speed,\r\n      timeRemaining: this.state.timeRemaining - 155\r\n    });\r\n  }\r\n\r\n  getSymbolFromPosition() {\r\n    const totalSymbols = 13;\r\n    const maxPosition = Spinner.iconHeight * (totalSymbols - 1) * -1;\r\n    let moved = (this.props.timer / 100) * this.multiplier;\r\n    let startPosition = this.start;\r\n    let currentPosition = startPosition;\r\n\r\n    for (let i = 0; i < moved; i++) {\r\n      currentPosition -= Spinner.iconHeight;\r\n\r\n      if (currentPosition < maxPosition) {\r\n        currentPosition = 0;\r\n      }\r\n    }\r\n\r\n    this.props.onFinish(currentPosition);\r\n  }\r\n\r\n  tick() {\r\n    if (this.state.timeRemaining <= 0) {\r\n      clearInterval(this.timer);\r\n      this.getSymbolFromPosition();\r\n    } else {\r\n      this.moveBackground();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    clearInterval(this.timer);\r\n\r\n    this.setState({\r\n      position: this.start,\r\n      timeRemaining: this.props.timer\r\n    });\r\n\r\n    this.timer = setInterval(() => {\r\n      this.tick();\r\n    }, 100);\r\n  }\r\n\r\n  render() {\r\n    let { position } = this.state;\r\n\r\n    return (\r\n      <div\r\n        style={{ backgroundPosition: \"0px \" + position + \"px\" }}\r\n        className='icons'\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Spinner;","import React from \"react\";\nimport \"./App.css\";\nimport Spinner from \"./Components/Spinner\";\n\nconst RepeatButton = props => {\n  return (\n    <button\n      aria-label=\"Play again.\"\n      id=\"repeatButton\"\n      onClick={props.onClick}\n    ></button>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      winner: null\n    };\n    this.finishHandler = this.finishHandler.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState({ winner: null });\n    this.emptyArray();\n    this._child1.forceUpdateHandler();\n    this._child2.forceUpdateHandler();\n    this._child3.forceUpdateHandler();\n    this._child4.forceUpdateHandler();\n    this._child5.forceUpdateHandler();\n  }\n\n  static matches = [];\n\n  finishHandler(value) {\n    App.matches.push(value);\n\n    if (App.matches.length === 5) {\n      const first = App.matches[0];\n      let results = App.matches.every(match => match === first);\n      this.setState({ winner: results });\n    }\n  }\n\n  emptyArray() {\n    App.matches = [];\n  }\n\n\n  render() {\n    const { winner } = this.state;\n    let repeatButton = null;\n\n    if (winner !== null) {\n      repeatButton = <RepeatButton onClick={this.handleClick} />;\n    }\n\n    return (\n      <div>\n        <div className={`spinner-container`}>\n          <Spinner\n            onFinish={this.finishHandler}\n            ref={child => {\n              this._child1 = child;\n            }}\n            timer=\"1000\"\n          />\n          <Spinner\n            onFinish={this.finishHandler}\n            ref={child => {\n              this._child2 = child;\n            }}\n            timer=\"1200\"\n          />\n          <Spinner\n            onFinish={this.finishHandler}\n            ref={child => {\n              this._child3 = child;\n            }}\n            timer=\"1400\"\n          />\n          <Spinner\n            onFinish={this.finishHandler}\n            ref={child => {\n              this._child4 = child;\n            }}\n            timer=\"1800\"\n          />\n          <Spinner\n            onFinish={this.finishHandler}\n            ref={child => {\n              this._child5 = child;\n            }}\n            timer=\"2000\"\n          />\n          <div className=\"gradient-fade\"></div>\n        </div>\n        {repeatButton}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}